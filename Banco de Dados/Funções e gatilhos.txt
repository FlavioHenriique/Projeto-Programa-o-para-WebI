CREATE OR REPLACE FUNCTION mediausuario(varchar,varchar)
RETURNS real as $$
DECLARE email alias for $1;
	media real;
	tipo_usuario alias for $2;
BEGIN
	SELECT INTO media  AVG(nota) FROM AVALIACAO WHERE usuarioAvaliado = email AND tipo = tipo_usuario;
	return media;
END $$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION notausuario() 
RETURNS TRIGGER as $$
BEGIN
	if new.tipo = 'motorista' then
	UPDATE USUARIO SET nota_motorista = mediausuario(NEW.usuarioAvaliado, NEW.tipo) where email = new.usuarioAvaliado;
	else
	UPDATE USUARIO SET nota_passageiro = mediausuario(NEW.usuarioAvaliado, NEW.tipo) where email = new.usuarioAvaliado;
	end if;
return null;
	
end $$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION atualizanota() 
RETURNS TRIGGER as $$
BEGIN
	if old.tipo = 'motorista' then	
	UPDATE USUARIO SET NOTA_motorista = mediausuario(old.usuarioAvaliado, old.tipo) where email = old.usuarioAvaliado;
	else 
	UPDATE USUARIO SET nota_passageiro = mediausuario(old.usuarioAvaliado, old.tipo) where email = old.usuarioAvaliado;
	end if;
return null;
	
end $$
LANGUAGE PLPGSQL;

CREATE TRIGGER calculaMedia
AFTER INSERT OR UPDATE ON avaliacao
FOR EACH ROW 
EXECUTE PROCEDURE notausuario();

CREATE TRIGGER atualizaMedia
AFTER DELETE ON avaliacao
FOR EACH ROW 
EXECUTE PROCEDURE atualizanota();
